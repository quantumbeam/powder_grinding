<launch>
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a ip_address argument is required -->
  <arg name="sim" default="false" />
  <arg name="ip_address" default="192.168.56.11" />

  <!-- If you want to change send and recieve format of denso_robot_control, -->
  <!-- you can specify the send_format and recv_format parameters -->
  <arg name="send_format" default="0" />
  <arg name="recv_format" default="2" />

  <arg name="bcap_slave_control_cycle_msec" default="8" />

  <!-- Override robot_name argument -->
  <arg name="robot_name" default="cobotta" />

  <!-- b-CAP Slave Mode [default: 0x202] -->
  <arg name="bcap_slave_mode" default="514" />

  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description" />

  <!-- Load universal robot description format (URDF) -->
  <param name="$(arg robot_description)"
    textfile="$(find grinding_descriptions)/urdf/$(arg robot_name)/$(arg robot_name).urdf" />

  <!-- The semantic description that corresponds to the URDF -->
  <param name="$(arg robot_description)_semantic"
    textfile="$(find grinding_descriptions)/config/$(arg robot_name)/$(arg robot_name).srdf" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="$(arg robot_description)_planning">
    <rosparam command="load"
      file="$(find grinding_descriptions)/config/$(arg robot_name)/joint_limits.yaml" />
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's
  namespace -->
  <group ns="$(arg robot_description)_kinematics">
    <rosparam command="load" file="$(find denso_robot_moveit_config)/config/kinematics.yaml" />
  </group>


  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false" />
    <param name="publish_frequency" type="double" value="125.0" />
    <rosparam param="source_list" subst_value="true">[/$(arg robot_name)/joint_states]</rosparam>
  </node>

  <!-- Load the URDF, SRDF and .yaml configuration file on the param server -->
  <include ns="/$(arg robot_name)"
    file="$(find grinding_descriptions)/urdf/$(arg robot_name)/$(arg robot_name).launch.xml" />
  <rosparam
    file="$(find grinding_descriptions)/urdf/$(arg robot_name)/denso_robot_control.yaml"
    command="load" />

  <!-- run the "simulation robot" by gazebo -->
  <group if="$(arg sim)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find denso_robot_gazebo)/worlds/denso_robot.world" />
    </include>

    <arg name="gui" default="true" />
    <param name="use_gui" value="$(arg gui)" />

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
      args="-param robot_description -urdf -model $(arg robot_name)" />

  </group>

  <!-- run the "real robot" interface nodes -->
  <group unless="$(arg sim)">
    <!-- Launch bcap service node -->
    <include ns="/$(arg robot_name)" file="$(find bcap_service)/launch/bcap_service.launch.xml">
      <arg name="ip_address" value="$(arg ip_address)" />
    </include>

    <!-- Launch bcap slave node -->
    <include ns="/$(arg robot_name)"
      file="$(find denso_robot_core)/launch/denso_robot_core.launch.xml">
      <arg name="bcap_slave_control_cycle_msec" value="$(arg bcap_slave_control_cycle_msec)" />
    </include>
    <include ns="/$(arg robot_name)"
      file="$(find denso_robot_control)/launch/denso_robot_control.launch.xml">
      <arg name="send_format" value="$(arg send_format)" />
      <arg name="recv_format" value="$(arg recv_format)" />
      <arg name="bcap_slave_mode" value="$(arg bcap_slave_mode)" />
    </include>

    <!-- Launch Controller -->
    <node name="denso_robot_control" pkg="denso_robot_control" type="denso_robot_control"
      output="screen" ns="/$(arg robot_name)" />
  </group>

  <!-- Spawn Controller -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen"
    ns="/$(arg robot_name)" args="joint_state_controller arm_controller" />

  <!-- Remap joint_states -->
  <node name="robot_state_publisher" pkg="robot_state_publisher"
    type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
  </node>

  <include file="$(find denso_robot_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
    <arg name="robot_name" value="$(arg robot_name)" />
  </include>

  <include file="$(find denso_robot_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true" />
  </include>

  <!-- <include file="$(find denso_robot_moveit_config)/launch/default_warehouse_db.launch" /> -->

</launch>