<?xml version="1.0"?>
<launch>
  <arg name="sim" default="False" />

  <arg name="debug" default="false" doc="Debug flag that will get passed on to ur_common.launch" />
  <arg name="robot_ip" default="192.168.56.42" doc="IP address by which the robot can be reached." />
  <arg name="reverse_ip" default=""
    doc="IP of the driver, if set to empty it will detect it automatically." />
  <arg name="reverse_port" default="50001"
    doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller." />
  <arg name="script_sender_port" default="50002"
    doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately." />
  <arg name="trajectory_port" default="50003"
    doc="Port that will be opened by the driver to allow trajectory forwarding." />
  <arg name="script_command_port" default="50004"
    doc="Port that will be opened by the driver to allow forwarding script commands to the robot." />
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot." />
  <arg name="controllers"
    default="joint_state_controller scaled_pos_joint_traj_controller speed_scaling_state_controller force_torque_sensor_controller"
    doc="Controllers that are activated by default." />
  <arg name="stopped_controllers" default="pos_joint_traj_controller joint_group_vel_controller"
    doc="Controllers that are initally loaded, but not started." />
  <arg name="controller_config_file" default="$(find ur_control)/config/ur5e_controllers.yaml"
    doc="Config file used for defining the ROS-Control controllers." />
  <arg name="robot_description_file" default="$(find grinding_descriptions)/launch/load_ur5e.launch"
    doc="Robot description launch file." />
  <arg name="kinematics_config"
    default="$(find grinding_descriptions)/config/230413_ur5e_calib.yaml"
    doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description." />
  <arg name="use_tool_communication" default="false"
    doc="On e-Series robots tool communication can be enabled with this argument" />
  <arg name="tool_voltage" default="0"
    doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_parity" default="0"
    doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_baud_rate" default="115200"
    doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_stop_bits" default="1"
    doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_rx_idle_chars" default="1.5"
    doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_tx_idle_chars" default="3.5"
    doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_device_name" default="/tmp/ttyUR"
    doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="tool_tcp_port" default="54321"
    doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true." />
  <arg name="headless_mode" default="false"
    doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot." />
  <arg name="ur_hardware_interface_node_required" default="true"
    doc="Shut down ros environment if ur_hardware_interface-node dies." />

  <!-- launch UR control directly-->
  <group unless="$(arg sim)">
    <include file="$(find ur_robot_driver)/launch/ur_control.launch">
      <arg name="debug" value="$(arg debug)" />
      <arg name="use_tool_communication" value="$(arg use_tool_communication)" />
      <arg name="controller_config_file" value="$(arg controller_config_file)" />
      <arg name="robot_ip" value="$(arg robot_ip)" />
      <arg name="reverse_ip" value="$(arg reverse_ip)" />
      <arg name="reverse_port" value="$(arg reverse_port)" />
      <arg name="script_sender_port" value="$(arg script_sender_port)" />
      <arg name="trajectory_port" value="$(arg trajectory_port)" />
      <arg name="script_command_port" value="$(arg script_command_port)" />
      <arg name="kinematics_config" value="$(arg kinematics_config)" />
      <arg name="tf_prefix" value="$(arg tf_prefix)" />
      <arg name="controllers" value="$(arg controllers)" />
      <arg name="stopped_controllers" value="$(arg stopped_controllers)" />
      <arg name="headless_mode" value="$(arg headless_mode)" />
      <arg name="tool_voltage" value="$(arg tool_voltage)" />
      <arg name="tool_parity" value="$(arg tool_parity)" />
      <arg name="tool_baud_rate" value="$(arg tool_baud_rate)" />
      <arg name="tool_stop_bits" value="$(arg tool_stop_bits)" />
      <arg name="tool_rx_idle_chars" value="$(arg tool_rx_idle_chars)" />
      <arg name="tool_tx_idle_chars" value="$(arg tool_tx_idle_chars)" />
      <arg name="tool_device_name" value="$(arg tool_device_name)" />
      <arg name="tool_tcp_port" value="$(arg tool_tcp_port)" />
      <arg name="ur_hardware_interface_node_required"
        value="$(arg ur_hardware_interface_node_required)" />
    </include>
  </group>


  <!-- Controller config -->
  <rosparam file="$(find ur_control)/config/ur5e_controllers.yaml" command="load" />

  <!-- robotiq 85 gripper launch -->
  <!-- <include file="$(find robotiq_control)/launch/urcap_cmodel_action_controller.launch">
    <arg name="namespace" value="/" />
    <arg name="gripper_prefix" value="" />
    <arg name="address" value="$(arg robot_ip)" />
    <arg name="config" value="cmodel_action_controller_85" />
  </include> -->

  <!--launch
  joint_state_publisher 
  Commnet by Nakajima
  Don't use joint_state_publisher and hardware_interface at the same time
  hardware_interface publish joints of the real robot to robot_state_publisher
  In contrast, joint_state_publisher publish dummy joints to robot_state_publisher, it's used for the
  simulation mainly 
  -->
  <group if="$(arg sim)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>


  <!--convert
  joint to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- Joint state publisher -->
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner"
    args="joint_state_controller" respawn="false" output="screen" />

  <!-- Spawn controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner"
    args="
        joint_state_controller
        force_torque_sensor_controller
        speed_scaling_state_controller
        scaled_pos_joint_traj_controller
        pos_joint_traj_controller
        cartesian_force_controller
        cartesian_compliance_controller
        motion_control_handle
        "
  />


  <!-- UR FT sensor launch -->
  <node name="ft_filter" pkg="ur_control" type="ft_filter.py" args="-z -t 'wrench'" output="screen" />
  <node name="ft_filter_of_compliance_controller" pkg="ur_control" type="ft_filter.py"
    args="-z -t 'wrench' -ot '/cartesian_compliance_controller/ft_sensor_wrench'" output="screen" />
  <node name="ft_filter_of_force_controller" pkg="ur_control" type="ft_filter.py"
    args="-z -t 'wrench' -ot '/cartesian_force_controller/ft_sensor_wrench'" output="screen" />

  <!-- launch RViz to display UR -->
  <arg name="gui" default="False" />
  <!-- <arg name="robot_description_file" default="$(find
  ur3_gazebo)/launch/inc/load_ur_roller.launch.xml" 
                                     doc="Launch file which populates the 'robot_description' parameter."/> -->
  <arg name="ur_robot" default="ur5e" />
  <arg name="RViz_launch" default="True" />
  <!-- Load urdf on the parameter server -->
  <!-- <include file="$(arg robot_description_file)">
    <arg name="ur_robot" value="$(arg ur_robot)"/>
  </include> -->
  <param name="use_gui" value="$(arg gui)" />
  <group if="$(arg RViz_launch)">
    <node name="rviz" pkg="rviz" type="rviz"
      args="-d $(find ur_robot_driver)/resources/example_rviz_config.rviz" />
  </group>


</launch>