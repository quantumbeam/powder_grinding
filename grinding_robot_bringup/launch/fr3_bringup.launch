<launch>

    <!-- specify if we are running in simulation -->
    <arg name="sim" default="false" />

    <!-- specify the URDF and SRDF files to be loaded -->
    <arg name="robot_description_file"
        default="$(find frcobot_description)/urdf/fr3v5.urdf" />
        
    <arg name="controller_config_file"
        default="$(find grinding_robot_bringup)/config/frrobot_controllers.yaml" />

    <!-- GDB functionality -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

    <!-- specify the planning pipeline -->
    <arg name="pipeline" default="ompl" />

    <!-- By default, we do not start a database (it can be large) -->
    <arg name="db" default="false" />
    <!-- Allow user to specify database location -->
    <arg name="db_path" default="$(find fr3v5_moveit_config)/default_warehouse_mongo_db" />

    <!--
    By default, hide joint_state_publisher's GUI
  
    MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
    The latter one maintains and publishes the current joint configuration of the simulated robot.
    It also provides a GUI to move the simulated robot around "manually".
    This corresponds to moving around the real robot without the use of MoveIt.
    -->
    <arg name="use_gui" default="false" />
    <arg name="use_rviz" default="true" />

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find fr3v5_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true" />
    </include>

    <!-- If needed, broadcast static tf for robot root -->


    <!-- We do not have a robot connected, so publish fake joint states -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="$(arg use_gui)" />
        <rosparam param="source_list">[/frrobot/joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="true" output="screen" /> -->

    <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers
    configured by default) -->
    <include file="$(find fr3v5_moveit_config)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true" />
        <arg name="fake_execution" value="false" />
        <arg name="info" value="true" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="pipeline" value="$(arg pipeline)" />
    </include>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find fr3v5_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
        <arg name="rviz_config" value="$(find fr3v5_moveit_config)/launch/moveit.rviz" />
        <arg name="debug" value="$(arg debug)" />
    </include>

    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(find fr3v5_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
        <arg name="moveit_warehouse_database_path" value="$(arg db_path)" />
    </include>

    <!-- start frrobot control -->
    <!-- Load URDF -->
    <param name="robot_description" textfile="$(arg robot_description_file)" />

    <group ns="frrobot">
        <!-- Load hardware interface -->
        <node if="$(arg sim)" name="frrobot_hardware_interface" pkg="ros_control_boilerplate"
            type="sim_hw_main" output="screen" launch-prefix="$(arg launch_prefix)" />
        <node unless="$(arg sim)" name="frrobot_hardware_interface" pkg="ros_control_boilerplate"
            type="frrobot_hw_main" output="screen" launch-prefix="$(arg launch_prefix)" />

        <!-- Load controller settings -->
        <rosparam
            file="$(arg controller_config_file)"
            command="load" />

        <!-- Load controller manager -->
        <node name="ros_control_controller_manager" pkg="controller_manager"
            type="controller_manager" respawn="false"
            output="screen" args="spawn joint_state_controller position_trajectory_controller" />

        <!-- Convert joint states to /tf tranforms -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    </group>


</launch>
  