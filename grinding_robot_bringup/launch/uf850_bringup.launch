<launch>
  <arg name="robot_ip" default="192.168.1.211"/>
  <arg name="report_type" default="normal" />
  <arg name="robot_sn" default="" />
  <arg name="model1300" default="false" />
  <arg name="limited" default="true" />
  <arg name="hw_ns" default="ufactory" />
  <arg name="velocity_control" default="false"/>
  <arg name="baud_checkset" default="true" />
  <arg name="default_gripper_baud" default="2000000" />
  <arg name="kinematics_suffix" default="" />

  <arg name="attach_to" default="world" />
  <arg name="attach_xyz" default="'0 0 0'" />
  <arg name="attach_rpy" default="'0 0 0'" />

  <arg name="add_realsense_d435i" default="false" />
  <arg name="add_d435i_links" default="false" />
  <arg name="add_gripper" default="false" />
  <arg name="add_vacuum_gripper" default="false" />
  <arg name="add_other_geometry" default="false"/>
  <arg name="geometry_type" default="box"/>
  <arg name="geometry_mass" default="0.1"/>
  <arg name="geometry_height" default="0.1"/>
  <arg name="geometry_radius" default="0.1"/>
  <arg name="geometry_length" default="0.1"/>
  <arg name="geometry_width" default="0.1"/>
  <arg name="geometry_mesh_filename" default=""/>
  <arg name="geometry_mesh_origin_xyz" default="'0 0 0'"/>
  <arg name="geometry_mesh_origin_rpy" default="'0 0 0'"/>
  <arg name="geometry_mesh_tcp_xyz" default="'0 0 0'"/>
  <arg name="geometry_mesh_tcp_rpy" default="'0 0 0'"/>

  <arg name="ext_ns" default="" />
  <arg name="sensors_3d" default="false" />
  <arg name="enforce_limits" default="true" />
  <arg name="jnt_stat_pub_rate" default="125" />
  <!-- load the default move_group planner (not xarm_simple_planner) -->
  <arg name="show_rviz" default="true" />
  <!-- no_gui_plan means that Rviz configuration is just for display purpose, no (Moveit) control panel loaded -->
  <arg name="no_gui_plan" default="false" />

  <!-- End effector parameters -->
  <arg name="pestle_length" default="0.1092" doc="The length of the pestle. This is used to calculate the position of the pestle tip" />
  <arg name="spatula_length" default="0.089" doc="The length of the spatula. This is used to calculate the position of the spatula tip" />


  <!-- Launch robot hardware interface -->
  <rosparam file="$(find uf_robot_moveit_config)/config/uf850/uf850_params.yaml" command="load" ns="$(arg hw_ns)"/>
  <rosparam file="$(find uf_robot_moveit_config)/config/uf850/joint_limits.yaml" command="load" ns="$(arg hw_ns)"/>

  <!-- Launch robot hardware driver -->
  <include file="$(find xarm_bringup)/launch/xarm_driver_common.launch">
    <arg name="robot_ip" value="$(arg robot_ip)" />
    <arg name="report_type" value="$(arg report_type)" />
    <arg name="dof" value="6" />
    <arg name="robot_type" value="uf850" />
    <arg name="use_moveit" value="true" />
    <arg name="namespace" value="$(arg hw_ns)" />
    <arg name="velocity_control" value="$(arg velocity_control)" />
    <arg name="enforce_limits" value="$(arg enforce_limits)" />
    <arg name="baud_checkset" value="$(arg baud_checkset)" />
    <arg name="default_gripper_baud" value="$(arg default_gripper_baud)" />
    <arg name="show_rviz" value="false" />
    <arg name="add_gripper" value="$(arg add_gripper)" />
  </include>

  <!-- Load robot controller configuration -->
  <rosparam file="$(find xarm_controller)/config/uf850/uf850_controllers.yaml" command="load" ns="$(arg hw_ns)"/>
  <node name="traj_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="$(arg hw_ns)" args="uf850_traj_controller joint_state_controller"/>

  <!-- Remap topics -->
  <remap from="/follow_joint_trajectory" to="$(arg hw_ns)/uf850_traj_controller/follow_joint_trajectory"/>

  <!-- Launch MoveIt with our custom robot description -->
  <include file="$(find uf_robot_moveit_config)/launch/__moveit_rviz_common.launch">
    <arg name="jnt_stat_source" value="[$(arg hw_ns)/joint_states]" />
    <arg name="jnt_stat_pub_rate" value="$(arg jnt_stat_pub_rate)"/>
    <arg name="show_rviz" value="$(arg show_rviz)" />
    <arg name="no_gui_plan" value="$(arg no_gui_plan)"/>
    <arg name="sensors_3d" value="$(arg sensors_3d)" />
    <arg name="reload_limited_description" value="false" />
    <arg name="dof" value="6" />
    <arg name="robot_type" value="uf850" />
    <arg name="robot_sn" value="$(arg robot_sn)"/>
    <arg name="model1300" value="$(arg model1300)"/>
    <arg name="limited" value="$(arg limited)"/>
    <arg name="kinematics_suffix_1" value="$(arg kinematics_suffix)"/>
    <arg name="attach_to" value="$(arg attach_to)"/>
    <arg name="attach_xyz" value="$(arg attach_xyz)"/>
    <arg name="attach_rpy" value="$(arg attach_rpy)"/>
    <arg name="add_realsense_d435i" value="$(arg add_realsense_d435i)"/>
    <arg name="add_d435i_links" value="$(arg add_d435i_links)"/>
    <arg name="add_gripper" value="$(arg add_gripper)"/>
    <arg name="add_vacuum_gripper" value="$(arg add_vacuum_gripper)"/>
    <arg name="add_other_geometry" value="$(arg add_other_geometry)"/>
    <arg name="geometry_type" value="$(arg geometry_type)"/>
    <arg name="geometry_mass" value="$(arg geometry_mass)"/>
    <arg name="geometry_height" value="$(arg geometry_height)"/>
    <arg name="geometry_radius" value="$(arg geometry_radius)"/>
    <arg name="geometry_length" value="$(arg geometry_length)"/>
    <arg name="geometry_width" value="$(arg geometry_width)"/>
    <arg name="geometry_mesh_filename" value="$(arg geometry_mesh_filename)"/>
    <arg name="geometry_mesh_origin_xyz" value="$(arg geometry_mesh_origin_xyz)"/>
    <arg name="geometry_mesh_origin_rpy" value="$(arg geometry_mesh_origin_rpy)"/>
    <arg name="geometry_mesh_tcp_xyz" value="$(arg geometry_mesh_tcp_xyz)"/>
    <arg name="geometry_mesh_tcp_rpy" value="$(arg geometry_mesh_tcp_rpy)"/>
  </include>

  <!-- Load custom robot description -->
  <arg name="description_file" default="$(find grinding_descriptions)/urdf/ufactory/uf850.xacro"/>
  <param name="robot_description" command="$(find xacro)/xacro '$(arg description_file)'" />

  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
  <!-- <arg name="controller_config_file" default="$(find onolab_robot_bringup)/config/uf850_controllers.yaml" /> -->
  <group ns="uf850">
    <rosparam file="$(find grinding_robot_bringup)/config/uf850_controllers.yaml" command="load" />
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn joint_state_controller position_trajectory_controller" />
    <!-- ... 他のノード ... -->
  </group>



  <!-- <group ns="uf850"> -->
  <!-- Load hardware interface -->
  <!-- <node name="uf850_hardware_interface" pkg="xarm_controller" type="xarm_hw" output="screen" launch-prefix="$(arg launch_prefix)" /> -->

  <!-- Load controller settings -->
  <!-- <rosparam file="$(arg controller_config_file)" command="load" /> -->

  <!-- Load controller manager -->
  <!-- <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn joint_state_controller position_trajectory_controller" /> -->

  <!-- Convert joint states to /tf tranforms -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->

  <!-- </group> -->

  <arg name="planning_scene_config" default="$(find grinding_motion_routines)/config/uf850_grinding_demo/planning_scene_config.yaml" />
  <node name="loading_planning_scene" pkg="grinding_descriptions" type="load_planning_scene.py" output="screen">
    <rosparam command="load" file="$(arg planning_scene_config)" />
  </node>


</launch>